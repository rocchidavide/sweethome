from datetime import datetime
import re
import os
from pathlib import Path
import shutil

from core.files import delete_symlink, create_symlink_in_home
from core.settings import SWEETHOME_PATH


class Builder:
    def __init__(self, basepath):
        self.build_path = basepath / "dotfiles_build"
        self.buildfiles = {}

    def init_build_folder(self):
        if os.path.exists(self.build_path):
            shutil.rmtree(self.build_path)
        os.makedirs(self.build_path)

    def add_buildfile(self, buildfile):
        self.buildfiles[buildfile.filename] = buildfile
        self.buildfiles[buildfile.filename].basepath = self.build_path

    def create_buildfile(self, filename, content=None):
        self.buildfiles[filename] = BuildFile(filename, content=content, basepath=self.build_path)

    def destroy_build_folder(self):
        if os.path.exists(self.build_path):
            shutil.rmtree(self.build_path)

    def store_file(self, filename):
        self.buildfiles[filename].save_file()


class BuildFile:
    def __init__(self, filename, content=None, basepath=None, output_dir=None):
        self.filename = filename
        self.basepath = basepath
        self.output_dir = Path(output_dir) if output_dir else None
        self.content = [
            f"#!/usr/bin/zsh",
            f"# Autogenerated on {self.get_datetime_now()} - DO NOT EDIT",
        ]
        if content:
            self.append_content(content)

    @property
    def path(self):
        filename = Path(self.filename)
        if self.output_dir:
            filename = self.output_dir / filename
        if self.basepath:
            filename = self.basepath / filename
        return filename

    @staticmethod
    def get_datetime_now():
        return datetime.now().strftime("%d/%m/%Y %H:%M:%S")

    def append_content(self, content, comment=None):
        if comment:
            self.content.append(f"\n# {comment}")
        if isinstance(content, str):
            # remove comments lines
            content = re.sub(r'(?m)^ *#.*\n?', '', content)
            self.content.append(content)
        elif isinstance(content, list):
            # remove comments lines
            content = [line for line in content if not line.startswith('#')]
            self.content.extend(content)
        else:
            raise Exception('content must be a string or a list of strings')

    def save_file(self):
        filename = self.path
        if not filename.parent.exists():
            os.makedirs(filename.parent)
        with open(filename, "w") as file:
            file.write("\n".join(self.content))


class BuildFileSweetHomeProfile(BuildFile):
    FILENAME = ".sweethome_profile"

    def __init__(self):
        super().__init__(self.FILENAME, content=[
            f'export SWEETHOME_PATH="{SWEETHOME_PATH}"',
        ])


class BuildFileSweetHomeRc(BuildFile):
    FILENAME = ".sweethome_rc"

    def __init__(self):
        super().__init__(self.FILENAME, content=[
            f'alias sweethome="{SWEETHOME_PATH}/dotmanage.py"',
        ])


def init_sweethomeprofile(builder):
    builder.add_buildfile(BuildFileSweetHomeProfile())


def get_sweethomeprofile(builder):
    return builder.buildfiles[BuildFileSweetHomeProfile.FILENAME]


def save_sweethomeprofile(builder):
    builder.store_file(BuildFileSweetHomeProfile.FILENAME)


def create_sweethomeprofile_symlink(builder):
    src_path = get_sweethomeprofile(builder).path
    create_symlink_in_home(src_path)


def remove_sweethomeprofile_symlink(builder):
    src_path = get_sweethomeprofile(builder).path
    dst_path = Path.home() / src_path.name
    delete_symlink(dst_path)


def init_sweethomerc(builder):
    builder.add_buildfile(BuildFileSweetHomeRc())


def get_sweethomerc(builder):
    return builder.buildfiles[BuildFileSweetHomeRc.FILENAME]


def save_sweethomerc(builder):
    builder.store_file(BuildFileSweetHomeRc.FILENAME)


def create_sweethomerc_symlink(builder):
    src_path = get_sweethomerc(builder).path
    create_symlink_in_home(src_path)


def remove_sweethomerc_symlink(builder):
    src_path = get_sweethomerc(builder).path
    dst_path = Path.home() / src_path.name
    delete_symlink(dst_path)
